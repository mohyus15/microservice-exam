version: '3.8'
services:
  discovery-server:
    image: mohyus15/backend-microservices-discovery-server:latest
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - zipkin
    networks:
      - spring

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    environment:
      MANAGEMENT_TRACING_BASEURL: http://zipkin:9411
    networks:
      - spring

  api-gateway:
    image: mohyus15/backend-microservices-api-gateway:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - discovery-server
      - zipkin
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - spring

  rabbitmq:
    image: rabbitmq:3.13.0-rc.4-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - spring

  postgres:
    image: mohyus15/postgres:latest
    container_name: postgres_db
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: oslo2020
    ports:
      - "5432:5432"
    networks:
      - spring
    restart: unless-stopped

  pgadmin:
    image: mohyus15/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - spring
    restart: unless-stopped

  orders:
    image: mohyus15/backend-microservices-orders:latest
    container_name: orders
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_RABBITMQ_HOST: rabbitmq
    networks:
      - spring
    depends_on:
      - postgres
      - rabbitmq
      - discovery-server

  products:
    image: mohyus15/backend-microservices-products:latest
    container_name: products
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_RABBITMQ_HOST: rabbitmq
    networks:
      - spring
    depends_on:
      - postgres
      - rabbitmq
      - discovery-server

  shipping:
    image: mohyus15/backend-microservices-shipping:latest
    container_name: shipping
    ports:
      - "8087:8087"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_RABBITMQ_HOST: rabbitmq
    networks:
      - spring
    depends_on:
      - postgres
      - rabbitmq
      - discovery-server
      - zipkin

  notification:
    image: mohyus15/backend-microservices-notification:latest
    container_name: notification
    ports:
      - "8086:8086"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_RABBITMQ_HOST: rabbitmq
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411
    networks:
      - spring
    depends_on:
      - postgres
      - rabbitmq
      - discovery-server
      - zipkin

  fruad:
    image: mohyus15/backend-microservices-fruad:latest
    container_name: fraud
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_RABBITMQ_HOST: rabbitmq
    networks:
      - spring
    depends_on:
      - postgres
      - rabbitmq
      - discovery-server
      - zipkin

  frontend:
    image: mohyus15/frontend:latest
    container_name: frontend
    build:
      context: ./../client
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    networks:
      - spring

  auth-users:
    image: mohyus15/backend-microservices-auth-users:latest
    container_name: auth-users
    ports:
      - "8089:8089"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - spring
    depends_on:
      - postgres
      - discovery-server
      - zipkin

networks:
  postgres:
    driver: bridge
  spring:
    driver: bridge

volumes:
  pgadmin:
  postgres_data:
