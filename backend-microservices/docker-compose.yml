version: "3.8"

services:
  discovery-server:
    container_name: discovery-server
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - discovery-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring

  rabbitmq:
    image: rabbitmq:3.13.0-rc.4-management-alpine
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - spring

  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: oslo2020
      POSTGRES_DB: microservices_DB
    volumes:
      - postgres:/data/postgres
      - ./create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
    ports:
      - "543:5432"
    networks:
      - postgres
    restart: unless-stopped

  pgadmin:
    container_name: sessionz_pgadmin
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@localhost.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 5050
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - '5050:5050'
    entrypoint:
      - "/bin/sh"
      - "-c"
      - "/bin/echo 'postgres:5432:*:dvega:oslo2020' > /tmp/pgpassfile && chmod 600 /tmp/pgpassfile && /entrypoint.sh"

  orders:
    container_name: orders
    build:
      context: ./orders
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_RABBITMQ_HOST=rabbitmq
    networks:
      - spring
      - postgres
    depends_on:
      - postgres
      - rabbitmq

  products:
    container_name: products
    build:
      context: ./products
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_RABBITMQ_HOST=rabbitmq
    networks:
      - spring
      - postgres
    depends_on:
      - postgres
      - rabbitmq

  shipping:
    container_name: shipping
    build:
      context: ./shipping
      dockerfile: Dockerfile
    ports:
      - "8087:8087"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_RABBITMQ_HOST=rabbitmq
    networks:
      - spring
      - postgres
    depends_on:
      - postgres

  notification:
    container_name: notification
    build:
      context: ./notific
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_RABBITMQ_HOST=rabbitmq
    networks:
      - spring
      - postgres
    depends_on:
      - postgres
      - rabbitmq

  customers:
    container_name: customers
    build:
      context: ./customers
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_RABBITMQ_HOST=rabbitmq
    networks:
      - spring
      - postgres
    depends_on:
      - postgres
      - rabbitmq

  fruad:
    container_name: fruad
    build:
      context: ./fruad
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_RABBITMQ_HOST=rabbitmq
    networks:
      - spring
      - postgres
    depends_on:
      - postgres
      - rabbitmq

  frontend:
    image: frontend
    build:
      context: ../../ex-2024/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"

networks:
  postgres:
    driver: bridge
  spring:
    driver: bridge

volumes:
  postgres:
  pgadmin:
